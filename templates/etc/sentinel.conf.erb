# redis sentinel server conf

# !!! generated by puppet !!!

<% if @osfamily == 'RedHat' and scope.function_versioncmp([@operatingsystemmajrelease, '7']) >= 0 and @operatingsystem != 'Amazon' -%>
daemonize no
<% else -%>
daemonize yes
<% end -%>

pidfile <%= @sentinel_pid_dir %>/redis-sentinel_<%= @sentinel_name %>.pid

logfile <%= @sentinel_log_dir -%>/redis-sentinel_<%= @sentinel_name %>.log

<% if @sentinel_ip then -%>
bind <%= @sentinel_ip %>

<% end -%>
port <%= @sentinel_port %>

<% if @protected_mode then -%>
protected-mode <%= @protected_mode %>

<% end -%>

<% if @announce_ip then -%>
sentinel announce-ip <%= @announce_ip %>
<% end -%>

<% if @announce_port then -%>
sentinel announce-port <%= @announce_port %>
<% end -%>

<% if @sentinel_id then -%>
sentinel myid <%= @sentinel_id %>
<% end -%>

<%
  #rules = scope.lookupvar('redis::sentinel::monitors')
  @monitors.sort.each do |name, rule| -%>
# monitor <%= name %>
sentinel monitor <%= name -%> <%= rule['master_host'] -%>  <%= rule['master_port'] -%> <%= rule['quorum'] %>
sentinel down-after-milliseconds <%= name -%> <%= rule['down_after_milliseconds'] %>
sentinel parallel-syncs <%= name -%> <%= rule['parallel-syncs'] %>
sentinel failover-timeout <%= name -%> <%= rule['failover_timeout'] %>
<%- if rule['auth-pass'] then %>sentinel auth-pass <%= name -%> <%= rule['auth-pass'] %><% end %>
<%- if rule['notification-script'] then %>sentinel notification-script <%= name -%> <%= rule['notification-script'] %><% end %>
<%- if rule['client-reconfig-script'] then %>sentinel client-reconfig-script <%= name -%> <%= rule['client-reconfig-script'] %><% end %>

<% end -%>
